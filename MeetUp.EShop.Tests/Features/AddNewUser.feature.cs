// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace MeetUp.EShop.Tests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AddNewUserFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "AddNewUser", "A short summary of the feature", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
#line 1 "AddNewUser.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("Features/AddNewUser.feature", 28);
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute("Register valid user")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Register valid user")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddNewUser")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("apiChangingDB")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Oleksiy", "Bondarenko", "oleksiy.bondarenko@example.com", "oleksiy_b", "M#9vTq2zR8pL", "0", null, DisplayName="Register valid user(Oleksiy,Bondarenko,oleksiy.bondarenko@example.com,oleksiy_b,M" +
            "#9vTq2zR8pL,0)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Kateryna", "Shevchenko", "kateryna.shevchenko@example.com", "kat.shev", "kA7!r4PzUx2q", "1", null, DisplayName="Register valid user(Kateryna,Shevchenko,kateryna.shevchenko@example.com,kat.shev," +
            "kA7!r4PzUx2q,1)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Ivan", "Moroz", "ivan.moroz@example.com", "ivanmoroz", "!Iv4n*MOroz21", "2", null, DisplayName="Register valid user(Ivan,Moroz,ivan.moroz@example.com,ivanmoroz,!Iv4n*MOroz21,2)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Maria", "Kovalenko", "maria.kovalenko@example.com", "mariak", "M@r1aKov2025", "3", null, DisplayName="Register valid user(Maria,Kovalenko,maria.kovalenko@example.com,mariak,M@r1aKov20" +
            "25,3)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Dmytro", "Petrenko", "dmytro.petrenko@example.org", "d_petrenko", "Dp8#t9!xL2wQ", "4", null, DisplayName="Register valid user(Dmytro,Petrenko,dmytro.petrenko@example.org,d_petrenko,Dp8#t9" +
            "!xL2wQ,4)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Olena", "Hrytsenko", "olena.hrytsenko@example.org", "elenah", "O1e!naHry2024", "5", null, DisplayName="Register valid user(Olena,Hrytsenko,olena.hrytsenko@example.org,elenah,O1e!naHry2" +
            "024,5)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Andriy", "Kravchuk", "andriy.kravchuk@example.net", "andriy.k", "A#ndriyK99!z", "6", null, DisplayName="Register valid user(Andriy,Kravchuk,andriy.kravchuk@example.net,andriy.k,A#ndriyK" +
            "99!z,6)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Natalia", "Lisova", "natalia.lisova@example.net", "nat_lisova", "N@t!l\\s0va2023", "7", null, DisplayName="Register valid user(Natalia,Lisova,natalia.lisova@example.net,nat_lisova,N@t!l\\s0" +
            "va2023,7)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Serhii", "Tarasenko", "serhii.tarasenko@example.com", "serh_t", "S3r#TarasX7p", "8", null, DisplayName="Register valid user(Serhii,Tarasenko,serhii.tarasenko@example.com,serh_t,S3r#Tara" +
            "sX7p,8)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Viktoriya", "Melnyk", "viktoriya.melnyk@example.com", "vika.m", "V!k0r1yaMH45", "9", null, DisplayName="Register valid user(Viktoriya,Melnyk,viktoriya.melnyk@example.com,vika.m,V!k0r1ya" +
            "MH45,9)")]
        public async global::System.Threading.Tasks.Task RegisterValidUser(string firstName, string lastName, string email, string login, string password, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "apiChangingDB"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Login", login);
            argumentsOfScenario.Add("Password", password);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Register valid user", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 6
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Email",
                            "Login",
                            "Password"});
                table1.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", email),
                            string.Format("{0}", login),
                            string.Format("{0}", password)});
#line 7
 await testRunner.GivenAsync("user tries tu register with data:", ((string)(null)), table1, "Given ");
#line hidden
#line 12
 await testRunner.WhenAsync("user tries to register with given data", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 13
 await testRunner.ThenAsync("user should be registered successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute("Register existing user")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Register existing user")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddNewUser")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("apiChangingDB")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Oleksiy", "Bondarenko", "oleksiy.bondarenko@example.com", "oleksiy_b", "M#9vTq2zR8pL", "10", null, DisplayName="Register existing user(Oleksiy,Bondarenko,oleksiy.bondarenko@example.com,oleksiy_" +
            "b,M#9vTq2zR8pL,10)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Kateryna", "Shevchenko", "kateryna.shevchenko@example.com", "kat.shev", "kA7!r4PzUx2q", "11", null, DisplayName="Register existing user(Kateryna,Shevchenko,kateryna.shevchenko@example.com,kat.sh" +
            "ev,kA7!r4PzUx2q,11)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Ivan", "Moroz", "ivan.moroz@example.com", "ivanmoroz", "!Iv4n*MOroz21", "12", null, DisplayName="Register existing user(Ivan,Moroz,ivan.moroz@example.com,ivanmoroz,!Iv4n*MOroz21," +
            "12)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Maria", "Kovalenko", "maria.kovalenko@example.com", "mariak", "M@r1aKov2025", "13", null, DisplayName="Register existing user(Maria,Kovalenko,maria.kovalenko@example.com,mariak,M@r1aKo" +
            "v2025,13)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Dmytro", "Petrenko", "dmytro.petrenko@example.org", "d_petrenko", "Dp8#t9!xL2wQ", "14", null, DisplayName="Register existing user(Dmytro,Petrenko,dmytro.petrenko@example.org,d_petrenko,Dp8" +
            "#t9!xL2wQ,14)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Olena", "Hrytsenko", "olena.hrytsenko@example.org", "elenah", "O1e!naHry2024", "15", null, DisplayName="Register existing user(Olena,Hrytsenko,olena.hrytsenko@example.org,elenah,O1e!naH" +
            "ry2024,15)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Andriy", "Kravchuk", "andriy.kravchuk@example.net", "andriy.k", "A#ndriyK99!z", "16", null, DisplayName="Register existing user(Andriy,Kravchuk,andriy.kravchuk@example.net,andriy.k,A#ndr" +
            "iyK99!z,16)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Natalia", "Lisova", "natalia.lisova@example.net", "nat_lisova", "N@t!l\\s0va2023", "17", null, DisplayName="Register existing user(Natalia,Lisova,natalia.lisova@example.net,nat_lisova,N@t!l" +
            "\\s0va2023,17)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Serhii", "Tarasenko", "serhii.tarasenko@example.com", "serh_t", "S3r#TarasX7p", "18", null, DisplayName="Register existing user(Serhii,Tarasenko,serhii.tarasenko@example.com,serh_t,S3r#T" +
            "arasX7p,18)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Viktoriya", "Melnyk", "viktoriya.melnyk@example.com", "vika.m", "V!k0r1yaMH45", "19", null, DisplayName="Register existing user(Viktoriya,Melnyk,viktoriya.melnyk@example.com,vika.m,V!k0r" +
            "1yaMH45,19)")]
        public async global::System.Threading.Tasks.Task RegisterExistingUser(string firstName, string lastName, string email, string login, string password, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "apiChangingDB"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Login", login);
            argumentsOfScenario.Add("Password", password);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Register existing user", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 52
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Email",
                            "Login",
                            "Password"});
                table2.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", email),
                            string.Format("{0}", login),
                            string.Format("{0}", password)});
#line 53
 await testRunner.GivenAsync("user exists:", ((string)(null)), table2, "Given ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Email",
                            "Login",
                            "Password"});
                table3.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", email),
                            string.Format("{0}", login),
                            string.Format("{0}", password)});
#line 56
 await testRunner.AndAsync("user tries tu register with data:", ((string)(null)), table3, "And ");
#line hidden
#line 60
 await testRunner.WhenAsync("user tries to register with given data", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 61
 await testRunner.ThenAsync("user should not be registered", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute("Register user with missing mandatory fields")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Register user with missing mandatory fields")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AddNewUser")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("apiChangingDB")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Oleksiy", "Bondarenko", "oleksiy.bondarenko@example.com", "", "M#9vTq2zR8pL", "20", null, DisplayName="Register user with missing mandatory fields(Oleksiy,Bondarenko,oleksiy.bondarenko" +
            "@example.com,,M#9vTq2zR8pL,20)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Kateryna", "Shevchenko", "kateryna.shevchenko@example.com", "kat.shev", "", "21", null, DisplayName="Register user with missing mandatory fields(Kateryna,Shevchenko,kateryna.shevchen" +
            "ko@example.com,kat.shev,,21)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Ivan", "Moroz", "ivan.moroz@example.com", "", "", "22", null, DisplayName="Register user with missing mandatory fields(Ivan,Moroz,ivan.moroz@example.com,,,2" +
            "2)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Maria", "Kovalenko", "maria.kovalenko@example.com", "", "", "23", null, DisplayName="Register user with missing mandatory fields(Maria,Kovalenko,maria.kovalenko@examp" +
            "le.com,,,23)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Dmytro", "Petrenko", "dmytro.petrenko@example.org", "d_petrenko", "", "24", null, DisplayName="Register user with missing mandatory fields(Dmytro,Petrenko,dmytro.petrenko@examp" +
            "le.org,d_petrenko,,24)")]
        [global::Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("Olena", "Hrytsenko", "olena.hrytsenko@example.org", "", "O1e!naHry2024", "25", null, DisplayName="Register user with missing mandatory fields(Olena,Hrytsenko,olena.hrytsenko@examp" +
            "le.org,,O1e!naHry2024,25)")]
        public async global::System.Threading.Tasks.Task RegisterUserWithMissingMandatoryFields(string firstName, string lastName, string email, string login, string password, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "apiChangingDB"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Login", login);
            argumentsOfScenario.Add("Password", password);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Register user with missing mandatory fields", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 79
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Email",
                            "Login",
                            "Password"});
                table4.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", email),
                            string.Format("{0}", login),
                            string.Format("{0}", password)});
#line 80
 await testRunner.GivenAsync("user tries tu register with data:", ((string)(null)), table4, "Given ");
#line hidden
#line 83
 await testRunner.WhenAsync("user tries to register with given data", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 84
 await testRunner.ThenAsync("user should not be registered", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
